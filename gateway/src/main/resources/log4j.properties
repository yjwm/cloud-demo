#配置根Logger 定义缺省的日志级别为INFO 自定义多个输出对象appender：一个是控制台console、一个是按照时间产生新文件
log4j.rootLogger=debug,console,dailyRolling


#针对package定义日志级别
log4j.logger.org.apache=WARN
log4j.logger.com.paic.pafademo=WARN
log4j.logger.org.quartz=INFO
log4j.logger.org.springframework.scheduling.quartz=INFO
# 如果要查看MBATIS的SQL日志信息，确保有下面配置
log4j.logger.com.ibatis=DEBUG
log4j.logger.com.ibatis.common.jdbc.SimpleDataSource=DEBUG
log4j.logger.com.ibatis.common.jdbc.ScriptRunner=DEBUG
log4j.logger.com.ibatis.sqlmap.engine.impl.SqlMapClientDelegate=DEBUG
log4j.logger.java.sql.ResultSet=DEBUG
log4j.logger.java.sql.Connection=DEBUG
log4j.logger.java.sql.Statement=DEBUG
log4j.logger.java.sql.PreparedStatement=DEBUG

# 设定控制台console的输出模式
log4j.appender.console=org.apache.log4j.ConsoleAppender 
log4j.appender.console.Encoding=UTF-8
log4j.appender.console.layout=org.apache.log4j.PatternLayout
#指定日志信息的最低输出级别，默认为DEBUG
log4j.appender.console.Threshold=DEBUG
log4j.appender.console.layout.ConversionPattern=[%d{yyyy-MM-dd HH:mm:ss}] [%-3p] %c{1}: %X{MDCString} %m%n


# 设定dailyRolling的输出模式,按照时间产生新文件
log4j.appender.dailyRolling=org.apache.log4j.DailyRollingFileAppender
# ${log.home}通过参数-D指定，比如启动WebLogic时加入参数-Dlog.home=D:/
log4j.appender.dailyRolling.File=${log.home}/testProject.log
#'.'yyyy-MM：每月
#'.'yyyy-ww：每周
#'.'yyyy-MM-dd：每天
#'.'yyyy-MM-dd-a：每天两次
#'.'yyyy-MM-dd-HH：每小时
#'.'yyyy-MM-dd-HH-mm：每分钟
log4j.appender.dailyRolling.DatePattern='.'yyyy-MM-dd-HH-mm
log4j.appender.dailyRolling.layout=org.apache.log4j.PatternLayout
log4j.appender.dailyRolling.layout.ConversionPattern=%x %d{yyyy-MM-dd HH:mm:ss} [%-3p] %c{1}: %m%n


#针对package定义日志级别
#单独将某一模块(某包下)的日志信息输出到某一个文件
log4j.logger.com.person=DEBUG,personModelLogger
#确保写入personModelLogger.log文件信息不重复出现到其他日志文件中
log4j.additivity.com.person=false
#设置最低日志输出级别
log4j.appender.personModelLogger.Threshold=INFO
#按照大小产生新文件
log4j.appender.personModelLogger=org.apache.log4j.RollingFileAppender
log4j.appender.personModelLogger.File=d:/personModelLogger.log
log4j.appender.personModelLogger.Append=true
#后缀可以是KB, MB 或者GB
log4j.appender.personModelLogger.MaxFileSize=1MB
#指定可以产生的滚动文件的最大数，例如，设为2则可以产生personModelLogger.log.1，personModelLogger.log.2两个滚动文件和一个personModelLogger.log文件
log4j.appender.personModelLogger.MaxBackupIndex=2
log4j.appender.personModelLogger.layout=org.apache.log4j.PatternLayout
log4j.appender.personModelLogger.layout.ConversionPattern=%x %d{MM/dd HH:mm:ss} [%-3p] %c{1}: %m%n


#单独将一个类的日志输出到一个文件中
log4j.logger.com.person.log4j.Log4jTest=DEBUG,Log4jTestLogger,console
#additivity设置为false,则不会输出到rootLogger定义的console,dailyRolling输出对象，但是如果我还是只想输出到控制台，可以修改为如下即可
#log4j.logger.com.person.log4j.Log4jTest=DEBUG,Log4jTestLogger,console
#确保写入Log4jTestLogger.log文件信息不重复出现到其他日志文件中，Log4jTestLogger比personModelLogger的范围更小，因此personModelLogger中不会出现类Log4jTest的日志
#log4j.additivity.com.person.log4j.Log4jTest=false
log4j.appender.Log4jTestLogger=org.apache.log4j.FileAppender
log4j.appender.Log4jTestLogger.File=d:/Log4jTestLogger.log
log4j.appender.Log4jTestLogger.layout=org.apache.log4j.PatternLayout
log4j.appender.Log4jTestLogger.layout.ConversionPattern=%x %d{MM/dd HH:mm:ss} [%-3p] %c{1}: %m%n


#类中获得自定义的记录器，在类中使用myLogger时会将日志写在myLogger.log中。
#类中获得该记录器： private static final Logger myLogger = LoggerFactory.getLogger("myLogger");
log4j.logger.myLogger=DEBUG,myLogger
#默认true,自定义的日志默认是同时输出到log4j.rootLogger所配置的日志中的
log4j.additivity.com.person.log4j.Log4jTest=true
log4j.appender.myLogger=org.apache.log4j.FileAppender
log4j.appender.myLogger.File=d:/myLogger.log
log4j.appender.myLogger.layout=org.apache.log4j.PatternLayout
log4j.appender.myLogger.layout.ConversionPattern=%x %d{MM/dd HH:mm:ss} [%-3p] %c{1}: %m%n


